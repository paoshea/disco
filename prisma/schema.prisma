// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  metadata  String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String           @id @default(cuid())
  name                  String?
  email                 String           @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  safetyAlerts          SafetyAlert[]
  safetyChecks          SafetyCheck[]
  password              String
  firstName             String
  lastName              String
  role                  String           @default("user")
  verificationToken     String?
  refreshToken          String?          @unique
  refreshTokenExpiresAt DateTime?
  lastLogin             DateTime?
  streakCount           Int              @default(0)
  lastStreak            DateTime?
  safetyEnabled         Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  points                Int              @default(0)
  passwordResets        PasswordReset[]
  emergencyContacts     EmergencyContact[]
  achievements          Achievement[]
  rateLimitAttempts     RateLimitAttempt[]
  createdRooms          ChatRoom[]       @relation("CreatedRooms")
  participatingRooms    ChatRoom[]       @relation("ParticipatingRooms")
  messages              Message[]
  locations             Location[]
  privacyZones          PrivacyZone[]
  events                Event[]
  eventParticipants     EventParticipant[]
  matches               UserMatch[]      @relation("UserMatches")
  matchedBy             UserMatch[]      @relation("MatchedUsers")
  reportedBy            Report[]         @relation("ReportedBy")
  reportedUsers         Report[]         @relation("ReportedUsers")
  blocksInitiated       UserBlock[]      @relation("BlockedBy")
  blocksReceived        UserBlock[]      @relation("BlockedUser")
  chatArchives          ChatArchive[]    @relation("UserChatArchives")
  notifications         Notification[]
  progress              UserProgress?    
}

model UserProgress {
  userId           String   @id
  totalMeetups     Int      @default(0)
  safetyCheckins   Int      @default(0)
  safetyScore      Int      @default(0)
  uniqueLocations  Int      @default(0)
  positiveRatings  Int      @default(0)
  user             User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
}

model EmergencyContact {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  email       String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SafetyCheck {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  type         String
  description  String
  scheduledFor DateTime
  completedAt  DateTime?
  status       String    @default("pending") // pending, completed, missed
  location     Json?     // Stores latitude, longitude, accuracy
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // e.g., 'streak', 'safety', 'community'
  name        String
  description String
  earnedAt    DateTime @default(now())
}

model RateLimitAttempt {
  id         String   @id @default(cuid())
  identifier String   // IP address or user ID
  action     String   // The action being rate limited (e.g., 'login', 'signup')
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@index([identifier, action, createdAt])
}

model ChatRoom {
  id            String    @id @default(cuid())
  name          String?
  creatorId     String
  creator       User      @relation("CreatedRooms", fields: [creatorId], references: [id])
  participantId String
  participant   User      @relation("ParticipatingRooms", fields: [participantId], references: [id])
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id         String    @id @default(cuid())
  content    String
  chatRoomId String
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  senderId   String
  sender     User      @relation(fields: [senderId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

model Location {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  latitude       Float
  longitude      Float
  accuracy       Float?
  privacyMode    String   // 'precise', 'approximate', 'zone'
  sharingEnabled Boolean  @default(false)
  timestamp      DateTime @default(now())

  @@index([userId, timestamp])
}

model PrivacyZone {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  latitude  Float
  longitude Float
  radius    Float    // in kilometers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}

model Event {
  id              String    @id @default(cuid())
  title           String
  description     String?
  latitude        Float
  longitude       Float
  startTime       DateTime
  endTime         DateTime?
  type            String    // 'social', 'professional', 'activity'
  maxParticipants Int?
  creatorId       String
  creator         User      @relation(fields: [creatorId], references: [id])
  tags            String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  participants    EventParticipant[]

  @@index([latitude, longitude])
  @@index([startTime])
}

model EventParticipant {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([eventId, userId])
  @@index([userId])
}

model UserMatch {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation("UserMatches", fields: [userId], references: [id])
  matchedUserId String
  matchedUser   User      @relation("MatchedUsers", fields: [matchedUserId], references: [id])
  status        String    // 'PENDING', 'ACCEPTED', 'REJECTED', 'BLOCKED', 'REPORTED'
  score         Float
  reportReason  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  @@index([userId])
  @@index([matchedUserId])
}

model SafetyAlert {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  priority    String    @default("medium")
  message     String?
  description String?
  location    Json?     // Stores latitude, longitude, accuracy
  dismissed   Boolean   @default(false)
  dismissedAt DateTime?
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?

  @@index([userId])
}

enum ReportType {
  harassment
  inappropriate
  spam
  scam
  other
}

enum ReportStatus {
  pending
  reviewing
  resolved
  dismissed
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reporter       User         @relation("ReportedBy", fields: [reporterId], references: [id])
  reportedUserId String
  reportedUser   User         @relation("ReportedUsers", fields: [reportedUserId], references: [id])
  type           ReportType
  description    String
  evidence       Json?        // Array of { type: string, url: string }
  status         ReportStatus @default(pending)
  adminNotes     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resolvedAt     DateTime?

  @@index([reporterId])
  @@index([reportedUserId])
}

model ChatArchive {
  id            String   @id @default(cuid())
  userId        String
  chatId        String
  content       String
  retentionDays Int
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          User     @relation("UserChatArchives", fields: [userId], references: [id], onDelete: Cascade)
}

model UserBlock {
  id          String   @id @default(cuid())
  blockerId   String
  blocker     User     @relation("BlockedBy", fields: [blockerId], references: [id])
  blockedId   String
  blocked     User     @relation("BlockedUser", fields: [blockedId], references: [id])
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}