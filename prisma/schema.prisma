// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(uuid())
  email                 String           @unique
  password             String
  firstName            String
  lastName             String
  role                 String           @default("user")
  emailVerified        Boolean          @default(false)
  verificationToken    String?
  refreshToken         String?          @unique
  refreshTokenExpiresAt DateTime?
  lastLogin            DateTime?
  streakCount          Int              @default(0)
  lastStreak           DateTime?
  safetyEnabled        Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  passwordResets       PasswordReset[]
  emergencyContacts    EmergencyContact[]
  safetyChecks         SafetyCheck[]
  achievements         Achievement[]
  rateLimitAttempts    RateLimitAttempt[]
  createdRooms         ChatRoom[]       @relation("CreatedRooms")
  participatingRooms   ChatRoom[]       @relation("ParticipatingRooms")
  messages             Message[]
  locations            Location[]
  privacyZones         PrivacyZone[]
  events               Event[]
  eventParticipants    EventParticipant[]
}

model PasswordReset {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
}

model EmergencyContact {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  email       String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SafetyCheck {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  type         String    // e.g., 'custom', 'meetup', etc.
  status       String    // 'pending', 'completed', 'missed'
  scheduledFor DateTime
  location     Json?     // Stores latitude, longitude, accuracy
  description  String?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // e.g., 'streak', 'safety', 'community'
  name        String
  description String
  earnedAt    DateTime @default(now())
}

model RateLimitAttempt {
  id         String   @id @default(uuid())
  identifier String   // IP address or user ID
  action     String   // The action being rate limited (e.g., 'login', 'signup')
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@index([identifier, action, createdAt])
}

model ChatRoom {
  id            String    @id @default(uuid())
  name          String?
  creatorId     String
  creator       User      @relation("CreatedRooms", fields: [creatorId], references: [id])
  participantId String
  participant   User      @relation("ParticipatingRooms", fields: [participantId], references: [id])
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id         String    @id @default(uuid())
  content    String
  chatRoomId String
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  senderId   String
  sender     User      @relation(fields: [senderId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Location {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  latitude       Float
  longitude      Float
  accuracy       Float?
  privacyMode    String   // 'precise', 'approximate', 'zone'
  sharingEnabled Boolean  @default(false)
  timestamp      DateTime @default(now())

  @@index([userId, timestamp])
}

model PrivacyZone {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  latitude  Float
  longitude Float
  radius    Float    // in kilometers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Event {
  id              String    @id @default(uuid())
  title           String
  description     String?
  latitude        Float
  longitude       Float
  startTime       DateTime
  endTime         DateTime?
  type            String    // 'social', 'professional', 'activity'
  maxParticipants Int?
  creatorId       String
  creator         User      @relation(fields: [creatorId], references: [id])
  tags            String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  participants    EventParticipant[]

  @@index([latitude, longitude])
  @@index([startTime])
}

model EventParticipant {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([eventId, userId])
  @@index([userId])
}
