# src/components/safety/SafetyCenter.tsx
```typescript
import React from 'react';
import { useAuth } from '@/hooks/useAuth';
import { EmergencyContact } from '@/types/safety';
import { safetyService } from '@/services/safety/safety.service';

interface SafetyCenterProps {
  onEmergencyContactUpdate: (contacts: EmergencyContact[]) => void;
}

export const SafetyCenter: React.FC<SafetyCenterProps> = ({
  onEmergencyContactUpdate,
}) => {
  const { user } = useAuth();
  const [emergencyContacts, setEmergencyContacts] = React.useState<EmergencyContact[]>([]);
  const [newContact, setNewContact] = React.useState({
    name: '',
    phone: '',
    relationship: '',
  });

  const addEmergencyContact = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const contact = await safetyService.addEmergencyContact({
        ...newContact,
        userId: user!.id,
      });
      setEmergencyContacts([...emergencyContacts, contact]);
      onEmergencyContactUpdate([...emergencyContacts, contact]);
      setNewContact({ name: '', phone: '', relationship: '' });
    } catch (error) {
      console.error('Failed to add emergency contact:', error);
    }
  };

  const activateEmergency = async () => {
    try {
      await safetyService.triggerEmergencyAlert({
        userId: user!.id,
        location: user!.location,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error('Failed to trigger emergency alert:', error);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Safety Center</h2>

      <div className="space-y-6">
        {/* Emergency Button */}
        <div className="text-center">
          <button
            onClick={activateEmergency}
            className="px-6 py-3 bg-red-600 text-white font-bold rounded-full hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
          >
            Emergency Assistance
          </button>
          <p className="mt-2 text-sm text-gray-600">
            Immediately alerts emergency contacts and local authorities
          </p>
        </div>

        {/* Emergency Contacts */}
        <div className="mt-8">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Emergency Contacts
          </h3>
          <div className="space-y-4">
            {emergencyContacts.map((contact) => (
              <div
                key={contact.id}
                className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
              >
                <div>
                  <p className="font-medium text-gray-900">{contact.name}</p>
                  <p className="text-sm text-gray-600">{contact.phone}</p>
                  <p className="text-sm text-gray-500">{contact.relationship}</p>
                </div>
                <button
                  onClick={() => safetyService.removeEmergencyContact(contact.id)}
                  className="text-red-600 hover:text-red-700"
                >
                  Remove
                </button>
              </div>
            ))}
          </div>

          {/* Add New Contact Form */}
          <form onSubmit={addEmergencyContact} className="mt-4 space-y-4">
            <div>
              <label
                htmlFor="contactName"
                className="block text-sm font-medium text-gray-700"
              >
                Contact Name
              </label>
              <input
                type="text"
                id="contactName"
                value={newContact.name}
                onChange={(e) =>
                  setNewContact({ ...newContact, name: e.target.value })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                required
              />
            </div>

            <div>
              <label
                htmlFor="contactPhone"
                className="block text-sm font-medium text-gray-700"
              >
                Phone Number
              </label>
              <input
                type="tel"
                id="contactPhone"
                value={newContact.phone}
                onChange={(e) =>
                  setNewContact({ ...newContact, phone: e.target.value })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                required
              />
            </div>

            <div>
              <label
                htmlFor="contactRelationship"
                className="block text-sm font-medium text-gray-700"
              >
                Relationship
              </label>
              <input
                type="text"
                id="contactRelationship"
                value={newContact.relationship}
                onChange={(e) =>
                  setNewContact({ ...newContact, relationship: e.target.value })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                required
              />
            </div>

            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
            >
              Add Contact
            </button>
          </form>
        </div>

        {/* Safety Tips */}
        <div className="mt-8">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Safety Tips</h3>
          <ul className="space-y-2 text-gray-600">
            <li>• Always meet in public places</li>
            <li>• Share your meeting location with trusted contacts</li>
            <li>• Trust your instincts</li>
            <li>• Keep personal information private initially</li>
            <li>• Report suspicious behavior immediately</li>
          </ul>
        </div>
      </div>
    </div>
  );
};
```

# src/components/matching/MatchSettings.tsx
```typescript
import React from 'react';
import { useForm } from 'react-hook-form';
import { MatchPreferences } from '@/types/match';
import { userService } from '@/services/api/user.service';

interface MatchSettingsProps {
  initialPreferences: MatchPreferences;
  onUpdate: (preferences: MatchPreferences) => void;
}

export const MatchSettings: React.FC<MatchSettingsProps> = ({
  initialPreferences,
  onUpdate,
}) => {
  const { register, handleSubmit, formState: { errors } } = useForm<MatchPreferences>({
    defaultValues: initialPreferences,
  });

  const onSubmit = async (data: MatchPreferences) => {
    try {
      const updated = await userService.updateMatchPreferences(data);
      onUpdate(updated);
    } catch (error) {
      console.error('Failed to update match preferences:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <h3 className="text-lg font-medium text-gray-900">Match Preferences</h3>
        <p className="mt-1 text-sm text-gray-500">
          Customize how you discover and connect with others
        </p>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Discovery Distance (km)
        </label>
        <input
          type="range"
          {...register('maxDistance', {
            min: 1,
            max: 100,
          })}
          className="mt-1 w-full"
          step="1"
        />
        <div className="mt-1 flex justify-between text-xs text-gray-500">
          <span>1km</span>
          <span>50km</span>
          <span>100km</span>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Age Range
        </label>
        <div className="mt-1 grid grid-cols-2 gap-4">
          <div>
            <input
              type="number"
              {...register('ageRange.min', {
                min: 18,
                max: 99,
              })}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
              placeholder="Min age"
            />
          </div>
          <div>
            <input
              type="number"
              {...register('ageRange.max', {
                min: 18,
                max: 99,
              })}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
              placeholder="Max age"
            />
          </div>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Interests
        </label>
        <div className="mt-2 space-y-2">
          {interestCategories.map((category) => (
            <div key={category.id} className="flex items-center">
              <input
                type="checkbox"
                {...register('interests')}
                value={category.id}
                className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
              />
              <label className="ml-2 text-sm text-gray-700">
                {category.name}
              </label>
            </div>
          ))}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Meeting Preferences
        </label>
        <div className="mt-2 space-y-2">
          {meetingTypes.map((type) => (
            <div key={type.id} className="flex items-center">
              <input
                type="checkbox"
                {...register('meetingTypes')}
                value={type.id}
                className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
              />
              <label className="ml-2 text-sm text-gray-700">{type.name}</label>
            </div>
          ))}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Availability
        </label>
        <div className="mt-2 grid grid-cols-7 gap-2">
          {daysOfWeek.map((day) => (
            <div key={day} className="text-center">
              <label className="text-xs text-gray-500">{day}</label>
              <input
                type="checkbox"
                {...register('availability')}
                value={day}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
              />
            </div>
          ))}
        </div>
      </div>

      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Save Preferences
        </button>
      </div>
    </form>
  );
};

const interestCategories = [
  { id: 'coffee', name: 'Coffee Meetups' },
  { id: 'dining', name: 'Dining' },
  { id: 'activities', name: 'Activities & Sports' },
  { id: 'networking', name: 'Professional Networking' },
  { id: 'learning', name: 'Learning & Skills' },
];

const meetingTypes = [
  { id: 'quick', name: 'Quick Chat (15-30 mins)' },
  { id: 'casual', name: 'Casual Meetup (1-2 hours)' },
  { id: 'activity', name: 'Activity-based' },
  { id: 'professional', name: 'Professional Meeting' },
];

const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
```

# src/services/safety/safety.service.ts
```typescript
import { apiClient } from '../api/client';
import { EmergencyContact, EmergencyAlert } from '@/types/safety';

export class SafetyService {
  async addEmergencyContact(contact: Omit<EmergencyContact, 'id'>): Promise<EmergencyContact> {
    const { data } = await apiClient.post<EmergencyContact>('/safety/contacts', contact);
    return data;
  }

  async removeEmergencyContact(contactId: string): Promise<void> {
    await apiClient.delete(`/safety/contacts/${contactId}`);
  }

  async triggerEmergencyAlert(alert: Omit<EmergencyAlert, 'id'>): Promise<void> {
    await apiClient.post('/safety/emergency', alert);
  }

  async getEmergencyContacts(): Promise<EmergencyContact[]> {
    const { data } = await apiClient.get<EmergencyContact[]>('/safety/contacts');
    return data;
  }

  async updateMeetingSafety(meetingId: string, status: 'safe' | 'unsafe'): Promise<void> {
    await apiClient.post(`/safety/meetings/${meetingId}/status`, { status });
  }

  async scheduleSafetyCheck(meetingId: string, checkTime: Date): Promise<void> {
    await apiClient.post(`/safety/meetings/${meetingId}/check`, { checkTime });
  }
}

export const safetyService = new SafetyService();
```

# src/types/safety.ts
```typescript
export interface EmergencyContact {
  id: string;
  userId: string;
  name: string;
  phone: string;
  relationship: string;
}

export interface EmergencyAlert {
  id: string;
  userId: string;
  location: {
    latitude: number;
    longitude: number;
  };
  timestamp: Date;
}

export interface SafetyCheck {
  id: string;
  meetingId: string;
  userId: string;
  scheduledTime: Date;
  status: 'pending' | 'completed' | 'misse